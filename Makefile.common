# include Makefile.config or define IGNORE_BUILD_OPTIONS before including this Makefile

SHELL := /bin/bash

URT_VERSION_MAJOR := 0
URT_VERSION_MINOR := 1
URT_VERSION_REVISION := 0
URT_VERSION := $(URT_VERSION_MAJOR).$(URT_VERSION_MINOR).$(URT_VERSION_REVISION)

# If IGNORE_BUILD_OPTIONS is defined, ignore this section.
# This is useful for having the other part of the file defined, while skipping this part
ifndef IGNORE_BUILD_OPTIONS
  # Set compiler variables
  ifeq ($(URT_CONFIG_CC), gcc)
    CC := gcc -c
    AR := ar rcs
    LD := gcc
    CC_LD := gcc
    CC_I := -I
    CC_L := -L
    CC_l := -l
    CC_D := -D
    CC_O0 := -O0
    CC_O := -O2
    CC_g := -g
    CC_Wall := -Wall
    CC_PIC := -fPIC
    CC_M := -MM -MG
    CC_o := -o
    AR_o :=
    LD_PIC := -shared -fPIC
    LD_o := -o
  endif

  # Set platform variables
  ifeq ($(URT_CONFIG_RT_SUBSYSTEM), linux)
    MAKE_LINUX = y
    URT_SYS_DIR = linux
    URT_CFLAGS +=
    URT_LDFLAGS += -lrt
  else
  ifeq ($(URT_CONFIG_RT_SUBSYSTEM), rtai)
    MAKE_RTAI_KERNEL = y
    MAKE_RTAI_USER = y
    URT_SYS_DIR = rtai-user
    URT_SYS_DIR_KERNEL = rtai-kernel
    RTAI_HOME := $(shell $(URT_CONFIG_RTAI_TOOL) --prefix)
    URT_CFLAGS += $(shell $(URT_CONFIG_RTAI_CONFIG_TOOL) --lxrt-cflags)
    URT_LDFLAGS +=  $(shell $(URT_CONFIG_RTAI_CONFIG_TOOL) --lxrt-ldflags)
    URT_CFLAGS_KERNEL += $(shell $(URT_CONFIG_RTAI_CONFIG_TOOL) --module-cflags)
    URT_KERNEL_SYMBOLS += $(RTAI_HOME)/modules/Module.symvers
  else
  ifeq ($(URT_CONFIG_RT_SUBSYSTEM), rtai-kernel-only)
    MAKE_RTAI_KERNEL = y
    URT_SYS_DIR_KERNEL = rtai-kernel
    RTAI_HOME := $(shell $(URT_CONFIG_RTAI_TOOL) --prefix)
    URT_CFLAGS_KERNEL += $(shell $(URT_CONFIG_RTAI_CONFIG_TOOL) --module-cflags)
    URT_KERNEL_SYMBOLS += $(RTAI_HOME)/modules/Module.symvers
  else
  ifeq ($(URT_CONFIG_RT_SUBSYSTEM), rtai-user-only)
    MAKE_RTAI_USER = y
    URT_SYS_DIR = rtai-user
    RTAI_HOME := $(shell $(URT_CONFIG_RTAI_TOOL) --prefix)
    URT_CFLAGS += $(shell $(URT_CONFIG_RTAI_CONFIG_TOOL) --lxrt-cflags)
    URT_LDFLAGS +=  $(shell $(URT_CONFIG_RTAI_CONFIG_TOOL) --lxrt-ldflags)
  else
  ifeq ($(URT_CONFIG_RT_SUBSYSTEM), qnx)
    MAKE_QNX = y
    URT_SYS_DIR = qnx
    URT_CFLAGS +=
  else
  ifeq ($(URT_CONFIG_RT_SUBSYSTEM), vxworks)
    MAKE_VXWORKS = y
    URT_SYS_DIR = vxworks
    URT_CFLAGS +=
  endif
  endif
  endif
  endif
  endif
  endif

  # Generic variables
  ifeq ($(URT_CONFIG_DEBUG), y)
    URT_CFLAGS += $(CC_O0) $(CC_g)
    URT_CFLAGS_KERNEL += $(CC_O0) $(CC_g)
  else
    URT_CFLAGS += $(CC_O) $(CC_D) NDEBUG
    URT_CFLAGS_KERNEL += $(CC_O) $(CC_D) NDEBUG
  endif

  URT_CFLAGS += $(CC_Wall)
  URT_CFLAGS_KERNEL += $(CC_Wall)
  URT_LDFLAGS += $(LD_PIC)

  URT_SHARED_CFLAGS := $(URT_CFLAGS) $(CC_PIC)
endif

# Disable colors if called from vim
ifneq ($(VIMRUNTIME),)
  URT_CONFIG_COLOR_BUILD =
endif

PRINTF := printf --
ifeq ($(URT_CONFIG_COLOR_BUILD), y)
# colors when used with sed
  STATUS_COLOR_ := \x1b[1;33m
  SUB_STATUS_COLOR_ := \x1b[1;36m
  DEFAULT_COLOR_ := \x1b[m
  ERROR_COLOR_ := \x1b[1;31m
  WARNING_COLOR_ := \x1b[1;35m
# colors when used with printf
  STATUS_COLOR := \$(STATUS_COLOR_)
  SUB_STATUS_COLOR := \$(SUB_STATUS_COLOR_)
  DEFAULT_COLOR := \$(DEFAULT_COLOR_)
  ERROR_COLOR := \$(ERROR_COLOR_)
  WARNING_COLOR := \$(WARNING_COLOR_)
  HIGHLIGHT := 2>&1 | sed -e '/\<error\>/Is%.*%$(ERROR_COLOR_)&$(DEFAULT_COLOR_)%g' -e '/\<warning\>/Is%.*%$(WARNING_COLOR_)&$(DEFAULT_COLOR_)%g' ; exit $${PIPESTATUS[0]}
else
  STATUS_COLOR :=
  SUB_STATUS_COLOR :=
  DEFAULT_COLOR :=
  ERROR_COLOR :=
  WARNING_COLOR :=
  HIGHLIGHT :=
endif

RM := rm -f
MKDIR := mkdir
