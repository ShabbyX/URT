functions urt_mem
# URT - Unified Real-Time Interface
version version 0.4.1
author Shahbaz Youssefi
keyword real-time
keyword middleware
keyword interface
shortcut index
shortcut globals
shortcut constants
previous functions urt_task
next functions urt_lock

Functions of this module handle private and shared memory allocation, deallocation and access.

FUNCTION urt_mem_new: (size: size_t, error: int * = NULL): void *
	Allocate memory of given size

	This function allocates memory of a given **`size`**, similar to `malloc`.

	INPUT size
		Size of memory to be allocated.
	INPUT error
		Optional error code return value. See explanation [here](Style#Error Reporting). One of the following values:

		- `ENOMEM` if out of memory.
	OUTPUT
		Similar to `malloc`, returns a pointer to the allocated memory, or `NULL` if failed.

FUNCTION urt_mem_resize: (old_mem: void *, old_size: size_t, size: size_t, error: int * = NULL): void *
	Enlarge memory to a given size

	This function enlarges mempory previously allocated with `[#urt_mem_new]` with size **`old_size`** to size **`size`**
	similar to `realloc`.

	If **`size`** is zero or smaller than **`old_size`**, the function doesn't reduce the memory size and simply returns
	**`old_mem`**.

	INPUT old_mem
		Memory to be enlarged
	INPUT old_size
		Previous size of memory
	INPUT size
		Size of memory to be allocated.
	INPUT error
		Optional error code return value. See explanation [here](Style#Error Reporting). One of the following values:

		- `ENOMEM` if out of memory.
	OUTPUT
		Similar to `realloc`, returns a pointer to the allocated memory, or `NULL` if failed.

FUNCTION urt_mem_delete: (mem: void *): void
	Free memory allocated with `urt_mem_new`

	This function frees memory allocated with `[#urt_mem_new]`. If **`mem`** is `NULL`, the function silently returns.

	INPUT mem
		Memory to be freed.

FUNCTION urt_shmem_new: (name: const char *, size: size_t, error: int * = NULL): void *
	Allocate shared memory of given size

	This function allocates memory of a given **`size`**, similar to `malloc`. This memory will be shared
	with other processes under the given **`name`**. See further details [here](Style#Shared Resource Allocation).

	INPUT name
		The name under which the memory is shared.
	INPUT size
		Size of memory to be allocated.
	INPUT error
		Optional error code return value. See explanation [here](Style#Error Reporting). One of the following values:

		- `ENOMEM` if out of memory,
		- `EEXIST` if an object with that name already exists,
		- `EINVAL` if given an invalid name or if **`size`** is invalid,
		- `ENOSPC` if maximum number of shared objects reached,
		- Possibly others based on back-end.
	OUTPUT
		A pointer to the allocated shared memory region, or `NULL` if failed.

FUNCTION urt_shmem_delete: (mem: void *): void
	Free or detach from shared memory

	This function detaches from shared memory, attached to by `[#urt_shmem_attach]`, or created by `[#urt_shmem_new]`.
	If **`mem`** is `NULL`, the function silently returns. If the number of processes attached to the shared memory become
	zero as a result of a call to this function, the memory will be freed.

	See further details [here](Style#Shared Resource Allocation).

	INPUT mem
		Memory to be detached from or freed.

FUNCTION urt_shmem_attach: (name: const char *, error: int * = NULL): void *
	Attach to shared memory

	This function attaches to the shared memory created under **`name`**. If no memory with that name exists, the function
	will fail.

	INPUT name
		The name under which the memory is shared.
	INPUT error
		Optional error code return value. See explanation [here](Style#Error Reporting). One of the following values:

		- `ENOMEM` if out of memory,
		- `EINVAL` if given an invalid name,
		- `ENOENT` if no shared object with given name exists,
		- Possibly others based on back-end.
	OUTPUT
		A pointer to the shared memory region, or `NULL` if failed.

FUNCTION urt_shmem_detach: (mem: void *): void
	Free or detach from shared memory

	The same as `[#urt_shmem_delete]`.

	INPUT mem
		See `[#urt_shmem_delete]`.
