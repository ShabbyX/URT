functions urt_lock
# URT - Unified Real-Time Interface
version version 0.4.2
author Shahbaz Youssefi
keyword real-time
keyword middleware
keyword interface
shortcut index
shortcut globals
shortcut constants
previous functions urt_mem
next functions urt_log

Functions of this module handle private and shared sync lock allocation, deallocation and access. The actual types depend on the real-time
back-end.

TYPE urt_sem: opaque
	A type representing a semaphore

	A system-dependent type representing a semaphore.

TYPE urt_mutex: opaque
	A type representing a mutex

	A system-dependent type representing a mutex.

TYPE urt_rwlock: opaque
	A type representing a readers-writers lock

	A system dependent type representing a readers-writers lock.

TYPE urt_cond: opaque
	A type representing a condition variable

	A system-dependent type representing a condition variable.

FUNCTION urt_sem_new: (init_value: unsigned int, error: int * = NULL): urt_sem *
NOTICE NON-RT
	Create a new semaphore

	This function creates and returns a new semaphore. This semaphore is unnamed and cannot be shared with other processes.

	INPUT init_value
		Initial value of the semaphore.
	INPUT error
		Optional error code return value. See explanation [here](Style#Error Reporting). One of the following values:

		- `ENOMEM` if out of memory,
		- `EINVAL` if **`init_value`** is invalid,
		- Possibly others based on back-end.
	OUTPUT
		A new semaphore, or `NULL` if not possible.

FUNCTION urt_sem_delete: (sem: urt_sem *): void
NOTICE NON-RT
	Free a semaphore created by `urt_sem_new`

	This function frees a semaphore created by `[#urt_sem_new]`. If **`sem`** is `NULL`, the function silently returns.

	INPUT sem
		The semaphore to be freed.

FUNCTION urt_shsem_new: (name: const char *, init_value: unsigned int, error: int * = NULL): urt_sem *
NOTICE NON-RT
	Create a new shared semaphore

	This function creates and returns a new shared semaphore. This semaphore will be shared
	with other processes under the given **`name`**. See further details [here](Style#Shared Resource Allocation).

	INPUT name
		The name under which the semaphore is shared.
	INPUT init_value
		Initial value of the semaphore.
	INPUT error
		Optional error code return value. See explanation [here](Style#Error Reporting). One of the following values:

		- `ENOMEM` if out of memory,
		- `EEXIST` if an object with that name already exists,
		- `EINVAL` if given an invalid name or if **`init_value`** is invalid,
		- `ENOSPC` if maximum number of shared objects reached,
		- Possibly others based on back-end.
	OUTPUT
		A new semaphore, or `NULL` if not possible.

FUNCTION urt_shsem_delete: (sem: urt_sem *): void
NOTICE NON-RT
	Free or detach from shared semaphore

	This function detaches from shared semaphore, attached to by `[#urt_shsem_attach]`, or created by `[#urt_shsem_new]`.
	If **`sem`** is `NULL`, the function silently returns. If the number of processes attached to the shared semaphore become
	zero as a result of a call to this function, the semaphore will be freed.

	See further details [here](Style#Shared Resource Allocation).

	INPUT sem
		The semaphore to be detached from or freed.

FUNCTION urt_shsem_attach: (name: const char *, error: int * = NULL): urt_sem *
NOTICE NON-RT
	Attach to shared semaphore

	This function attaches to the shared semaphore created under **`name`**. If no semaphore with that name exists, the function
	will fail.

	INPUT name
		The name under which the semaphore is shared.
	INPUT error
		Optional error code return value. See explanation [here](Style#Error Reporting). One of the following values:

		- `ENOMEM` if out of memory,
		- `EINVAL` if given an invalid name,
		- `ENOENT` if no shared object with given name exists,
		- Possibly others based on back-end.
	OUTPUT
		A pointer to the shared semaphore, or `NULL` if failed.

FUNCTION urt_shsem_detach: (sem: urt_sem *): void
NOTICE NON-RT
	Free or detach from shared semaphore

	The same as `[#urt_shsem_delete]`.

	INPUT sem
		See `[#urt_shsem_delete]`.

FUNCTION urt_sem_wait: (sem: urt_sem *, stop: volatile sig_atomic_t * = NULL): int
NOTICE RT
	Wait on a semaphore

	This function waits on semaphore **`sem`**. If the semaphore is not available, it will stay blocked until either it is [posted](#urt_sem_post),
	there is an error, or the optional argument **`stop`** becomes `true`.

	INPUT sem
		The semaphore to wait on.
	INPUT stop
		Optional argument that can cancel the operation. See explanation [here](Style#Blocking Locks).
	OUTPUT
		Returns one of the following:

		- `0` on success,
		- `ECANCELED` if **`stop`** is provided and it becomes `true` before the lock is aquired,
		- Possibly others based on back-end.

FUNCTION urt_sem_waitf: (sem: urt_sem *, stop: (volatile void *): bool, data: volatile void * = NULL): int
NOTICE RT
	Wait on a semaphore

	This function is similar to `[#urt_sem_wait]`, except it takes a function and user data that decide when to stop, as opposed to a single
	variable.

	INPUT sem
		See `[#urt_sem_wait]`.
	INPUT stop
		A function that can cancel the operation. See explanation [here](Style#Blocking Locks).
	INPUT data
		User data that would be passed to **`stop`**.
	OUTPUT
		See `[#urt_sem_wait]`.

FUNCTION urt_sem_timed_wait: (sem: urt_sem *, wait_time: urt_time): int
NOTICE RT
	Wait on a semaphore for a maximum of given time

	This function waits on semaphore **`sem`**. If the semaphore is not available until **`wait_time`** nanoseconds has passed, the function
	will return.

	INPUT sem
		The semaphore to wait on.
	INPUT wait_time
		Maximum waiting time on the semaphore.
	OUTPUT
		Returns one of the following:

		- `0` on success,
		- `ETIMEDOUT` if **`wait_time`** nanoseconds has passed and the semaphore was not available,
		- Possibly others based on back-end.

FUNCTION urt_sem_try_wait: (sem: urt_sem *): int
NOTICE RT
	Try waiting on a semaphore

	This function tries to wait on semaphore **`sem`**. If the semaphore is not available it will immediately return.

	INPUT sem
		The semaphore to wait on.
	OUTPUT
		Returns one of the following:

		- `0` on success,
		- `EBUSY` if lock was not available,
		- Possibly others based on back-end.

FUNCTION urt_sem_post: (sem: urt_sem *): int
NOTICE RT
	Post a semaphore

	This function posts semaphore **`sem`**. If there are threads waiting on the semaphore, one of them arbitrarily is chosen and unblocked.

	INPUT sem
		The semaphore to post.
	OUTPUT

		- `0` on success,
		- Possibly others based on back-end.

FUNCTION urt_mutex_new: (error: int * = NULL): urt_mutex *
NOTICE NON-RT
	Create a new mutex

	This function creates and returns a new mutex. This mutex is unnamed and cannot be shared with other processes.

	INPUT error
		Optional error code return value. See explanation [here](Style#Error Reporting). One of the following values:

		- `ENOMEM` if out of memory,
		- `EAGAIN` if operation failed but there is a chance of success on retry,
		- Possibly others based on back-end.
	OUTPUT
		A new mutex, or `NULL` if not possible.

FUNCTION urt_mutex_delete: (mutex: urt_mutex *): void
NOTICE NON-RT
	Free a mutex created by `urt_mutex_new`

	This function frees a mutex created by `[#urt_mutex_new]`. If **`mutex`** is `NULL`, the function silently returns.

	INPUT mutex
		The mutex to be freed.

FUNCTION urt_shmutex_new: (name: const char *, error: int * = NULL): urt_mutex *
NOTICE NON-RT
	Create a new shared mutex

	This function creates and returns a new shared mutex. This mutex will be shared
	with other processes under the given **`name`**. See further details [here](Style#Shared Resource Allocation).

	INPUT name
		The name under which the mutex is shared.
	INPUT error
		Optional error code return value. See explanation [here](Style#Error Reporting). One of the following values:

		- `ENOMEM` if out of memory,
		- `EEXIST` if an object with that name already exists,
		- `EINVAL` if given an invalid name,
		- `ENOSPC` if maximum number of shared objects reached,
		- `ENOSUP` if the underlying system doesn't support shared readers-writers locks,
		- Possibly others based on back-end.
	OUTPUT
		A new mutex, or `NULL` if not possible.

FUNCTION urt_shmutex_delete: (mutex: urt_mutex *): void
NOTICE NON-RT
	Free or detach from shared mutex

	This function detaches from shared mutex, attached to by `[#urt_shmutex_attach]`, or created by `[#urt_shmutex_new]`.
	If **`mutex`** is `NULL`, the function silently returns. If the number of processes attached to the shared mutex become
	zero as a result of a call to this function, the mutex will be freed.

	See further details [here](Style#Shared Resource Allocation).

	INPUT mutex
		The mutex to be detached from or freed.

FUNCTION urt_shmutex_attach: (name: const char *, error: int * = NULL): urt_mutex *
NOTICE NON-RT
	Attach to shared mutex

	This function attaches to the shared mutex created under **`name`**. If no mutex with that name exists, the function
	will fail.

	INPUT name
		The name under which the mutex is shared.
	INPUT error
		Optional error code return value. See explanation [here](Style#Error Reporting). One of the following values:

		- `ENOMEM` if out of memory,
		- `EINVAL` if given an invalid name,
		- `ENOENT` if no shared object with given name exists,
		- Possibly others based on back-end.
	OUTPUT
		A pointer to the shared mutex, or `NULL` if failed.

FUNCTION urt_shmutex_detach: (mutex: urt_mutex *): void
NOTICE NON-RT
	Free or detach from shared mutex

	The same as `[#urt_shmutex_delete]`.

	INPUT mutex
		See `[#urt_shmutex_delete]`.

FUNCTION urt_mutex_lock: (mutex: urt_mutex *, stop: volatile sig_atomic_t * = NULL): int
NOTICE RT
	Lock a mutex

	This function locks mutex **`mutex`**. If the mutex is not available, it will stay blocked until either it is [unlocked](#urt_mutex_unlock),
	there is an error, or the optional argument **`stop`** becomes `true`.

	INPUT mutex
		The mutex to lock.
	INPUT stop
		Optional argument that can cancel the operation. See explanation [here](Style#Blocking Locks).
	OUTPUT
		Returns one of the following:

		- `0` on success,
		- `ECANCELED` if **`stop`** is provided and it becomes `true` before the lock is aquired,
		- Possibly others based on back-end.

FUNCTION urt_mutex_lockf: (mutex: urt_mutex *, stop: (volatile void *): bool, data: volatile void * = NULL): int
NOTICE RT
	Lock a mutex

	This function is similar to `[#urt_mutex_lock]`, except it takes a function and user data that decide when to stop, as opposed to a single
	variable.

	INPUT mutex
		See `[#urt_mutex_lock]`.
	INPUT stop
		A function that can cancel the operation. See explanation [here](Style#Blocking Locks).
	INPUT data
		User data that would be passed to **`stop`**.
	OUTPUT
		See `[#urt_mutex_lock]`.

FUNCTION urt_mutex_timed_lock: (mutex: urt_mutex *, wait_time: urt_time): int
NOTICE RT
	Lock a mutex if possible in a maximum of given time

	This function locks mutex **`mutex`**. If the mutex is not available until **`wait_time`** nanoseconds has passed, the function
	will return.

	INPUT mutex
		The mutex to lock.
	INPUT wait_time
		Maximum waiting time on the mutex.
	OUTPUT
		Returns one of the following:

		- `0` on success,
		- `ETIMEDOUT` if **`wait_time`** nanoseconds has passed and the semaphore was not available,
		- Possibly others based on back-end.

FUNCTION urt_mutex_try_lock: (mutex: urt_mutex *): int
NOTICE RT
	Try locking a mutex

	This function tries to lock mutex **`mutex`**. If the mutex is not available it will immediately return.

	INPUT mutex
		The mutex to lock.
	OUTPUT
		Returns one of the following:

		- `0` on success,
		- `EBUSY` if lock was not available,
		- Possibly others based on back-end.

FUNCTION urt_mutex_unlock: (mutex: urt_mutex *): int
NOTICE RT
	Unlock a mutex

	This function unlocks mutex **`mutex`**. If there are threads waiting on the mutex, one of them arbitrarily is chosen and unblocked.

	INPUT mutex
		The mutex to unlock.
	OUTPUT
		Returns one of the following:

		- `0` on success,
		- Possibly others based on back-end.

FUNCTION urt_rwlock_new: (error: int * = NULL): urt_rwlock *
NOTICE NON-RT
	Create a new readers-writers lock

	This function creates and returns a new readers-writers lock. This lock is unnamed and cannot be shared with other processes.

	INPUT error
		Optional error code return value. See explanation [here](Style#Error Reporting). One of the following values:

		- `ENOMEM` if out of memory,
		- `EAGAIN` if operation failed but there is a chance of success on retry,
		- Possibly others based on back-end.
	OUTPUT
		A new readers-writers lock, or `NULL` if not possible.

FUNCTION urt_rwlock_delete: (rwlock: urt_rwlock *): void
NOTICE NON-RT
	Free a readers-writers lock created by `urt_rwlock_new`

	This function frees a readers-writers lock created by `[#urt_rwlock_new]`. If **`rwlock`** is `NULL`, the function silently returns.

	INPUT rwlock
		The readers-writers lock to be freed.

FUNCTION urt_shrwlock_new: (name: const char *, error: int * = NULL): urt_rwlock *
NOTICE NON-RT
	Create a new shared readers-writers lock

	This function creates and returns a new shared readers-writers lock. This lock will be shared
	with other processes under the given **`name`**. See further details [here](Style#Shared Resource Allocation).

	INPUT name
		The name under which the lock is shared.
	INPUT error
		Optional error code return value. See explanation [here](Style#Error Reporting). One of the following values:

		- `ENOMEM` if out of memory,
		- `EEXIST` if an object with that name already exists,
		- `EINVAL` if given an invalid name,
		- `ENOSPC` if maximum number of shared objects reached,
		- `ENOSUP` if the underlying system doesn't support shared readers-writers locks,
		- Possibly others based on back-end.

	OUTPUT
		A new readers-writers lock, or `NULL` if not possible.

FUNCTION urt_shrwlock_delete: (rwlock: urt_rwlock *): void
NOTICE NON-RT
	Free or detach from shared readers-writers lock

	This function detaches from shared readers-writers lock, attached to by `[#urt_shrwlock_attach]`, or created by `[#urt_shrwlock_new]`.
	If **`rwlock`** is `NULL`, the function silently returns. If the number of processes attached to the shared lock become
	zero as a result of a call to this function, the lock will be freed.

	See further details [here](Style#Shared Resource Allocation).

	INPUT rwlock
		The readers-writers lock to be detached from or freed.

FUNCTION urt_shrwlock_attach: (name: const char *, error: int * = NULL): urt_rwlock *
NOTICE NON-RT
	Attach to shared readers-writers lock

	This function attaches to the shared readers-writers lock created under **`name`**. If no lock with that name exists, the function
	will fail.

	INPUT name
		The name under which the lock is shared.
	INPUT error
		Optional error code return value. See explanation [here](Style#Error Reporting). One of the following values:

		- `ENOMEM` if out of memory,
		- `EINVAL` if given an invalid name,
		- `ENOENT` if no shared object with given name exists,
		- Possibly others based on back-end.
	OUTPUT
		A pointer to the shared readers-writers lock, or `NULL` if failed.

FUNCTION urt_shrwlock_detach: (rwlock: urt_rwlock *): void
NOTICE NON-RT
	Free or detach from shared readers-writers lock

	The same as `[#urt_shrwlock_delete]`.

	INPUT rwlock
		See `[#urt_shrwlock_delete]`.

FUNCTION urt_rwlock_read_lock: (rwlock: urt_rwlock *, stop: volatile sig_atomic_t * = NULL): int
NOTICE RT
	Read-lock a readers-writers lock

	This function read-locks readers-writers lock **`rwlock`**. If the lock is not available, it will stay blocked until either it is
	[unlocked](#urt_rwlock_write_unlock), there is an error, or the optional argument **`stop`** becomes `true`.

	So long as the lock is not [write-locked](#urt_rwlock_write_lock) any number of readers can simultaneously acquire the lock. This number may be capped
	by system specific limitations.

	INPUT rwlock
		The readers-writers lock to lock.
	INPUT stop
		Optional argument that can cancel the operation. See explanation [here](Style#Blocking Locks).
	OUTPUT
		Returns one of the following:

		- `0` on success,
		- `ECANCELED` if **`stop`** is provided and it becomes `true` before the lock is aquired,
		- Possibly others based on back-end.

FUNCTION urt_rwlock_read_lockf: (rwlock: urt_rwlock *, stop: (volatile void *): bool, data: volatile void * = NULL): int
NOTICE RT
	Read-lock a readers-writers lock

	This function is similar to `[#urt_rwlock_read_lock]`, except it takes a function and user data that decide when to stop, as opposed to a single
	variable.

	INPUT rwlock
		See `[#urt_rwlock_read_lock]`.
	INPUT stop
		A function that can cancel the operation. See explanation [here](Style#Blocking Locks).
	INPUT data
		User data that would be passed to **`stop`**.
	OUTPUT
		See `[#urt_rwlock_read_lock]`.

FUNCTION urt_rwlock_write_lock: (rwlock: urt_rwlock *, stop: volatile sig_atomic_t * = NULL): int
NOTICE RT
	Write-lock a readers-writers lock

	This function write-locks readers-writers lock **`rwlock`**. If the lock is not available, it will stay blocked until either it is
	[unlocked](#urt_rwlock_read_unlock), there is an error, or the optional argument **`stop`** becomes `true`.

	There can be only one writer having the lock. Furthermore, a writer would stay blocked until all readers have released the lock. In a race condition,
	it is a system-specific behavior whether writers are prioritized or readers.

	INPUT rwlock
		The readers-writers lock to lock.
	INPUT stop
		Optional argument that can cancel the operation. See explanation [here](Style#Blocking Locks).
	OUTPUT
		Returns one of the following:

		- `0` on success,
		- `ECANCELED` if **`stop`** is provided and it becomes `true` before the lock is aquired,
		- Possibly others based on back-end.

FUNCTION urt_rwlock_write_lockf: (rwlock: urt_rwlock *, stop: (volatile void *): bool, data: volatile void * = NULL): int
NOTICE RT
	Write-lock a writeers-writers lock

	This function is similar to `[#urt_rwlock_write_lock]`, except it takes a function and user data that decide when to stop, as opposed to a single
	variable.

	INPUT rwlock
		See `[#urt_rwlock_write_lock]`.
	INPUT stop
		A function that can cancel the operation. See explanation [here](Style#Blocking Locks).
	INPUT data
		User data that would be passed to **`stop`**.
	OUTPUT
		See `[#urt_rwlock_write_lock]`.

FUNCTION urt_rwlock_timed_read_lock: (rwlock: urt_rwlock *, wait_time: urt_time): int
NOTICE RT
	Read-lock a readers-writers lock if possible in a maximum of given time

	This function read-locks readers-writers lock **`rwlock`**. If the lock is not available until **`wait_time`** nanoseconds has passed, the function
	will return.

	INPUT rwlock
		The readers-writers lock to lock.
	INPUT wait_time
		Maximum waiting time on the lock.
	OUTPUT
		Returns one of the following:

		- `0` on success,
		- `ETIMEDOUT` if **`wait_time`** nanoseconds has passed and the semaphore was not available,
		- Possibly others based on back-end.

FUNCTION urt_rwlock_timed_write_lock: (rwlock: urt_rwlock *, wait_time: urt_time): int
NOTICE RT
	Write-lock a readers-writers lock if possible in a maximum of given time

	This function write-locks readers-writers lock **`rwlock`**. If the lock is not available until **`wait_time`** nanoseconds has passed, the function
	will return.

	INPUT rwlock
		The readers-writers lock to lock.
	INPUT wait_time
		Maximum waiting time on the lock.
	OUTPUT
		Returns one of the following:

		- `0` on success,
		- `ETIMEDOUT` if **`wait_time`** nanoseconds has passed and the semaphore was not available,
		- Possibly others based on back-end.

FUNCTION urt_rwlock_try_read_lock: (rwlock: urt_rwlock *): int
NOTICE RT
	Try read-locking a readers-writers lock

	This function tries to read-lock readers-writers lock **`rwlock`**. If the lock is not available it will immediately return.

	INPUT rwlock
		The readers-writers lock to lock.
	OUTPUT
		Returns one of the following:

		- `0` on success,
		- `EBUSY` if lock was not available,
		- Possibly others based on back-end.

FUNCTION urt_rwlock_try_write_lock: (rwlock: urt_rwlock *): int
NOTICE RT
	Try write-locking a readers-writers lock

	This function tries to write-lock readers-writers lock **`rwlock`**. If the lock is not available it will immediately return.

	INPUT rwlock
		The readers-writers lock to lock.
	OUTPUT
		Returns one of the following:

		- `0` on success,
		- `EBUSY` if lock was not available,
		- Possibly others based on back-end.

FUNCTION urt_rwlock_read_unlock: (rwlock: urt_rwlock *): int
NOTICE RT
	Read-unlock a readers-writers lock

	This function read-unlocks readers-writers lock **`rwlock`**. If there are threads waiting on the lock, one of them arbitrarily is chosen and unblocked.

	INPUT rwlock
		The readers-writers lock to unlock.
	OUTPUT
		Returns one of the following:

		- `0` on success,
		- Possibly others based on back-end.

FUNCTION urt_rwlock_write_unlock: (rwlock: urt_rwlock *): int
NOTICE RT
	Write-unlock a readers-writers lock

	This function write-unlocks readers-writers lock **`rwlock`**. If there are threads waiting on the lock, one of them arbitrarily is chosen and unblocked.

	INPUT rwlock
		The readers-writers lock to unlock.
	OUTPUT
		Returns one of the following:

		- `0` on success,
		- Possibly others based on back-end.

FUNCTION urt_cond_new: (error: int * = NULL): urt_cond *
NOTICE NON-RT
	Create a new condition variable

	This function creates and returns a new condition variable. This lock is unnamed and cannot be shared with other processes.

	INPUT error
		Optional error code return value. See explanation [here](Style#Error Reporting). One of the following values:

		- `ENOMEM` if out of memory,
		- `EAGAIN` if operation failed but there is a chance of success on retry,
		- Possibly others based on back-end.
	OUTPUT
		A new condition variable, or `NULL` if not possible.

FUNCTION urt_cond_delete: (cond: urt_cond *): void
NOTICE NON-RT
	Free a condition variable created by `urt_cond_new`

	This function frees a condition variable created by `[#urt_cond_new]`. If **`cond`** is `NULL`, the function silently returns.

	INPUT cond
		The condition variable to be freed.

FUNCTION urt_shcond_new: (name: const char *, error: int * = NULL): urt_cond *
NOTICE NON-RT
	Create a new shared condition variable

	This function creates and returns a new shared condition variable. This lock will be shared
	with other processes under the given **`name`**. See further details [here](Style#Shared Resource Allocation).

	INPUT name
		The name under which the lock is shared.
	INPUT error
		Optional error code return value. See explanation [here](Style#Error Reporting). One of the following values:

		- `ENOMEM` if out of memory,
		- `EEXIST` if an object with that name already exists,
		- `EINVAL` if given an invalid name,
		- `ENOSPC` if maximum number of shared objects reached,
		- `ENOSUP` if the underlying system doesn't support shared condition variables,
		- Possibly others based on back-end.

	OUTPUT
		A new condition variable, or `NULL` if not possible.

FUNCTION urt_shcond_delete: (cond: urt_cond *): void
NOTICE NON-RT
	Free or detach from shared condition variable

	This function detaches from shared condition variable, attached to by `[#urt_shcond_attach]`, or created by `[#urt_shcond_new]`.
	If **`cond`** is `NULL`, the function silently returns. If the number of processes attached to the shared lock become
	zero as a result of a call to this function, the lock will be freed.

	See further details [here](Style#Shared Resource Allocation).

	INPUT cond
		The condition variable to be detached from or freed.

FUNCTION urt_shcond_attach: (name: const char *, error: int * = NULL): urt_cond *
NOTICE NON-RT
	Attach to shared condition variable

	This function attaches to the shared condition variable created under **`name`**. If no lock with that name exists, the function
	will fail.

	INPUT name
		The name under which the lock is shared.
	INPUT error
		Optional error code return value. See explanation [here](Style#Error Reporting). One of the following values:

		- `ENOMEM` if out of memory,
		- `EINVAL` if given an invalid name,
		- `ENOENT` if no shared object with given name exists,
		- Possibly others based on back-end.
	OUTPUT
		A pointer to the shared condition variable, or `NULL` if failed.

FUNCTION urt_shcond_detach: (cond: urt_cond *): void
NOTICE NON-RT
	Free or detach from shared condition variable

	The same as `[#urt_shcond_delete]`.

	INPUT cond
		See `[#urt_shcond_delete]`.

FUNCTION urt_cond_wait: (cond: urt_cond *, mutex: urt_mutex *, stop: volatile sig_atomic_t * = NULL): int
NOTICE RT
	Wait on a condition variable

	This function waits on a condition variable **`cond`**. If the lock is not available, it will stay blocked until either it is
	[signalled](#urt_cond_signal), there is an error, or the optional argument **`stop`** becomes `true`. **`mutex`** is automatically locked and
	unlocked by this function.  The usage of `urt_cond_wait` is as such:

	```
		urt_mutex_lock(mutex);
		while (!condition(data))
			urt_cond_wait(cond, mutex);
		process(data);
		urt_mutex_unlock(mutex);
	```

	In this scheme, `condition` and `process` access shared data that need to be protected by **`mutex`**.

	INPUT cond
		The condition variable to wait on.
	INPUT mutex
		The mutex associated with the condition variable.
	INPUT stop
		Optional argument that can cancel the operation. See explanation [here](Style#Blocking Locks).
	OUTPUT
		Returns one of the following:

		- `0` on success,
		- `ECANCELED` if **`stop`** is provided and it becomes `true` before the lock is aquired,
		- Possibly others based on back-end.

FUNCTION urt_cond_waitf: (cond: urt_cond *, mutex: urt_mutex *, stop: (volatile void *): bool, data: volatile void * = NULL): int
NOTICE RT
	Wait on a condition variable

	This function is similar to `[#urt_cond_wait]`, except it takes a function and user data that decide when to stop, as opposed to a single
	variable.

	INPUT cond
		See `[#urt_cond_wait]`.
	INPUT mutex
		See `[#urt_cond_wait]`.
	INPUT stop
		A function that can cancel the operation. See explanation [here](Style#Blocking Locks).
	INPUT data
		User data that would be passed to **`stop`**.
	OUTPUT
		See `[#urt_cond_wait]`.

FUNCTION urt_cond_timed_wait: (cond: urt_cond *, mutex: urt_mutex *, wait_time: urt_time): int
NOTICE RT
	Wait on a condition variable if possible in a maximum of given time

	This function waits on condition variable **`cond`**. If the lock is not available until **`wait_time`** nanoseconds has passed, the function
	will return. See `[#urt_cond_wait]` for usage as well as explanation of the role of **`mutex`**.

	INPUT cond
		The condition variable to lock.
	INPUT mutex
		The mutex associated with the condition variable.
	INPUT wait_time
		Maximum waiting time on the lock.
	OUTPUT
		Returns one of the following:

		- `0` on success,
		- `ETIMEDOUT` if **`wait_time`** nanoseconds has passed and the semaphore was not available,
		- Possibly others based on back-end.

FUNCTION urt_cond_signal: (cond: urt_cond *): int
NOTICE RT
	Signal a condition variable

	This function signals condition variable **`cond`**. If there are threads waiting on the lock, one of them arbitrarily is chosen and unblocked.
	The usage of `urt_cond_signal` is as such:

	```
		urt_mutex_lock(mutex);
		process(data);
		urt_cond_signal(cond);
		urt_mutex_unlock(mutex);
	```

	In this scheme, `process` accesses shared data that need to be protected by `mutex`. See also `[#urt_cond_wait]`.


	INPUT cond
		The condition variable to signal.
	OUTPUT
		Returns one of the following:

		- `0` on success,
		- Possibly others based on back-end.

FUNCTION urt_cond_broadcast: (cond: urt_cond *): int
NOTICE RT
	Broadcast a condition variable

	This function broadcasts condition variable **`cond`**. If there are threads waiting on the lock, all of them arbitrarily is chosen and unblocked.
	The usage is similar to `[#urt_cond_signal]`.

	INPUT cond
		The condition variable to broadcast.
	OUTPUT
		Returns one of the following:

		- `0` on success,
		- Possibly others based on back-end.
