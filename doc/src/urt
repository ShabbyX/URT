functions urt
# URT - Unified Real-Time Interface
version version 0.3.0
author Shahbaz Youssefi
keyword real-time
keyword middleware
keyword interface
shortcut index
shortcut globals
shortcut constants
previous index
next functions urt_time

These functions setup URT itself.

FUNCTION urt_init: (): int
	Initialize URT

	This function initializes URT. It must be called before any other function can be called (except `[#urt_recover]`).

	OUTPUT
		Returns one of the following:

		- `0` if successful,
		- `EALREADY` if URT is already initialized,
		- `ENOMEM` if out of memory,
		- Possibly others based on subsystem.

FUNCTION urt_exit: (): void
	Free URT

	This function frees resources allocated by URT. It must be called before program exit.

FUNCTION urt_recover: (): void
	Recover from bad state due to crash

	If a program crashes, it may leave some internal shared entities of URT, such as locks, in a bad state. This function
	will try to recover from such cases. The function may not be able to completely recover the system if the
	damage is too severe, though.

	It is important for this function to be called when no users of URT are present. Otherwise, it is impossible to
	understand whether the current state of the system is due to a normal usage of URT by another user or a previous
	crash. Therefore, calling this function while another user is present may likely corrupt the system.

	Note: `urt_init` should **not** need to be called before this function.

	This function is a helper function for the `urt_recover` tool and most likely unnecessary to your application.

MACRO URT_GLUE: (init, body, exit, data_type, interrupted, done)
	Glue code to connect parts of the application

	This macro connects parts of the application, namely initialization, body, finalization and interrupt handling
	to abstract from differences between kernel space and user space applications.

	The user application could therefore look like this:

	```
	#include \<urt.h\>

	`struct prog_variables`
	{
		/* program variables */
	};

	`static int prog_start(struct prog_variables *vars);`
	`static void prog_body(struct prog_variables *vars);`
	`static void prog_end(struct prog_variables *vars);`

	``URT_GLUE(prog_start, prog_body, prog_end, struct prog_variables, _interrupted, _done)``

	static int prog_start(struct prog_variables *vars)
	{
		/* other initialization */
		`urt_init();`
		return 0;
	}

	static void prog_body(struct prog_variables *vars)
	{
		/* allocate some resources */
		if (_interrupted)
			goto exit_interrupted;

		/* some calculations */

		/* wait for something to happen */
		while (!_interrupted \&\& get_command() != SOME_COMMAND)
			urt_sleep(SOME_TIME);
		`if (_interrupted)`
			goto exit_interrupted;

		/* other similar situations */

		goto exit_done;
	exit_interrupted:
		urt_log("body interrupted\\n");
	exit_done:
		``_done = 1;``
	}

	static void prog_end(struct prog_variables *vars)
	{
		/* cleanup */
		`urt_exit();`
	}
	```

	INPUT init
		A small function to be called on program start.  In kernel space, this is
		the `\_\_init` function.

		The type of this function is `int (*)(data_type *)`.
	INPUT body
		A non-real-time thread (which is the main thread in user space) that handles
		allocation of resources and various other operations.  The purpose of this function
		is to allow the init function to finish, which in kernel space signals the end of `insmod`.
		This way, `rmmod` can be called asynchronous to the execution of **`body`**.
		After the execution of **`body`**, the program waits for interrupt (user space) or
		`rmmod` (kernel space) before calling the **`exit`** function.

		The type of this function is `void (*)(data_type *)`.
	INPUT exit
		A function to be called on program exit.  In kernel space, this is
		the `\_\_exit` funcion.

		The type of this function is `void (*)(data_type *)`.
	INPUT data_type
		Type of a variable instantiated whose address is passed to the **`init`**, **`body`** and **`exit`**
		functions.  This variable is uninitialized and must be initialized on **`init`** if intended to be
		used.  It cannot be `void`.
	INPUT interrupted
		The name of a variable (defined by this macro) that would become non-zero
		when the program is interrupted (user space) or `rmmod`ed (kernel space).
		Therefore, this variable is **set by URT**.
	INPUT done
		The name of a variable (defined by this macro) that should be set by the user
		(in **`body`** for example) which indicates that it is safe to call the **`exit`** function.
		Therefore, this variable is **set by the user**.

MACRO URT_GLUE_NO_INTERRUPT: (init, body, exit, data_type)
	Similar to `URT_GLUE` without interrupt handling

	This macro is similar to `[#URT_GLUE]` except that it does not install an interrupt handler.  It would thus be
	the responsibility of the programmer herself to ensure that **`exit`** waits for **`body`** to finish.

	INPUT init
		See `[#URT_GLUE]`.
	INPUT body
		See `[#URT_GLUE]`.
	INPUT exit
		See `[#URT_GLUE]`.
	INPUT data_type
		See `[#URT_GLUE]`.

MACRO URT_MODULE_AUTHOR: (author)
	Declare author of the application

	This macro declares the author of the application.  This macro is similar to `MODULE_AUTHOR` in the Linux kernel.

	INPUT author
		The author of the application as a C string.

MACRO URT_MODULE_LICENSE: (license)
	Declare license of the application

	This macro declares the license of the application.  This macro is similar to `MODULE_LICENSE` in the Linux kernel.

	INPUT license
		The license of the application as a C string.

MACRO URT_MODULE_DESCRIPTION: (description)
	Declare description of the application

	This macro describes the application itself.  This macro is similar to `MODULE_DESCRIPTION` in the Linux kernel.

	INPUT description
		The description of the application as a C string.

MACRO URT_MODULE_PARAM_START: ()
	Start declaration of application parameters

	This macro starts declaration of application parameters.  Refer to `[#URT_MODULE_PARAM]` for details.

MACRO URT_MODULE_PARAM_END: ()
	End declaration of application parameters

	This macro ends declaration of application parameters.  Refer to `[#URT_MODULE_PARAM]` for details.

MACRO URT_MODULE_PARAM: (name, type, description)
	Declare an application parameter

	This macro declares an application parameter.  It should be in an enclosing `[#URT_MODULE_PARAM_START]`/`[#URT_MODULE_PARAM_END]`
	pair, which themselves can only be written once in the application and before `[#URT_GLUE]`.

	This macro is similar to a combination of `module_param` and `MODULE_PARM_DESC` in the Linux kernel.

	The variables used as parameter must be declared beforehand, similar to a Linux kernel module.  An example, including also
	`[#URT_MODULE_PARAM_ARRAY]`, is given below. Note the lack of semicolon.

	```
	unsigned char arg_byte = 0;
	int arg_int = 0;
	bool arg_bool = false;
	char *arg_str = NULL;
	unsigned long arg_long_arr\[10] = {0};
	unsigned int arg_long_arr_count = 0;
	short arg_short_arr\[5] = {0};
	char *arg_str_arr\[4] = {NULL};
	unsigned int arg_str_arr_count = 0;

	URT_MODULE_PARAM_START()
	URT_MODULE_PARAM(arg_byte, byte, "A byte argument")
	URT_MODULE_PARAM(arg_int, int, "An int argument")
	URT_MODULE_PARAM(arg_bool, bool, "A bool argument")
	URT_MODULE_PARAM(arg_str, charp, "A string argument")
	URT_MODULE_PARAM_ARRAY(arg_long_arr, ulong, &arg_long_arr_count, "A long array argument")
	URT_MODULE_PARAM_ARRAY(arg_short_arr, short, NULL, "A short array argument")
	URT_MODULE_PARAM_ARRAY(arg_str_arr, charp, &arg_str_arr_count, "A string array argument")
	URT_MODULE_PARAM_END()
	```

	The arguments in the command line are given the same way they could be given to a Linux kernel module.  An examples with the above
	arguments is:

	```
	$ $run_app_cmd  arg_byte=34 \\
			arg_int=-324 \\
			arg_bool=y \\
			arg_str=no_quotes \\
			arg_long_arr=1,2,3,4 \\
			'arg_short_arr=3,4' \\
			'arg_str_arr="with quotes,multiple,strings"'
	```

	For kernel modules, these arguments can be viewed with `modinfo`.  With a similar output, for user-space applications if `--help` or `-h`
	is given, these arguments are shown.

	All `'-'` in the command line argument names are converted to `'\_'` for convenience.

	INPUT name
		The name of the variable that would contain the argument.  The name of the argument would be the same as the name of the variable.
	INPUT type
		The type of the variable.  They are the same as those supported by the Linux kernel, namely:

		- `byte`: of type `unsigned char`,
		- `short`, `ushort`: of type `short` and `unsigned short`,
		- `int`, `uint`: of type `int` and `unsigned int`,
		- `long`, `ulong`: of type `long` and `unsigned long`,
		- `bool`, `invbool`: of type `bool`.  These arguments can be mentioned without `=value`, in which case they would default to
		  `true` and `false` respectively.  They can take `0`, `1`, `n`, `y`, `N` or `Y` on command line,
		- `charp`: of type `char *`, allocated automatically.
	INPUT description
		A string describing the argument.

MACRO URT_MODULE_PARAM_ARRAY: (name, type, nump, description)
	Declare an application array parameter

	This macro is similar to `[#URT_MODULE_PARAM]`, but declares **`name`** to be an _array_ of **`type`**.  The optional argument **`nump`**
	is a pointer to a variable to store the actual number of arguments passed by command line.

	INPUT name
		See `[#URT_MODULE_PARAM]`.
	INPUT type
		See `[#URT_MODULE_PARAM]`.
	INPUT nump
		A pointer of typed `unsigned int *`, where if provided (i.e., not `NULL`), will contain the number of values stored in the array
		given by **`name`** from command line.
	INPUT description
		See `[#URT_MODULE_PARAM]`.
