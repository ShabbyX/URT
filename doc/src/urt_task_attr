struct urt_task_attr
# URT - Unified Real-Time Interface
version version 0.4.1
author Shahbaz Youssefi
keyword real-time
keyword middleware
keyword interface
shortcut index
shortcut globals
shortcut constants
next functions urt_task

This structure contains parameters for task creation. Each of the fields of this struct can be invalid, in which case the default value is used. Invalid
in the case of `[#priority]` refers to a test with `[#urt_priority_is_valid]` while in other cases zero value is invalid. `[#uses_fpu]` defaults
to false, so one can say there is no invalid value for that field.

VAR period: urt_time
	Period of the task

	If not zero, this field determines the period of the task. Functions such as `[#urt_task_wait_period](urt_task)` use this value. If this
	field is zero, the task is not periodic.

VAR start_time: urt_time
	Start time of the task

	If not zero, this field specifies the start time of the task. Start time is an absolute value with the same origin as `[#urt_get_time](urt_time)`.
	It can be used to provide an offset for periodic tasks or a delayed start for normal tasks. If not provided, the task will start after
	`[#urt_task_start](urt_task)` is called without delay. The host system may introduce delays in task creation.

VAR stack_size: size_t
	Size of task's stack

	If not zero, this field specifies the size of stack allocated for the task. If zero, the configurable default value is used
	(`URT_CONFIG_DEFAULT_STACK_SIZE`). Often, a single page (usually 4096 bytes) is enough for the task.

VAR priority: int
	Task priority

	If [valid](#urt_priority_is_valid), this field determines the priority of the task. If invalid, `[#URT_MIN_PRIORITY](constants)` is used as
	task priority. See `[#URT_MIN_PRIORITY](constants)`, `[#URT_MAX_PRIORITY](constants)` and `[#URT_MORE_PRIORITY](constants)` for more information.

VAR uses_fpu: bool
	Whether the task uses FPU

	This field lets URT know whether the task plans on using the Floating Point Unit (FPU). On some systems, e.g. within the Linux kernel context,
	this information is needed to initialize the FPU.

VAR soft: bool
	Whether the task is soft-real-time

	This field chooses between soft-real-time and hard-real-time.  In both cases the task would be in real-time context and functions marked as
	`RT` are available.  However, soft-real-time tasks don't have any deadline guarantees and are best-effort.  If a subsystem doesn't support
	soft-real-time tasks, they will be created as hard-real-time.

FUNCTION urt_priority_is_valid: (priority: int): bool
	Check whether priority number is valid

	This function checks whether given **`priority`** is a valid priority number in the system.

	INPUT priority
		Priority number to be checked.
	OUTPUT
		This function returns `true` if the given **`priority`** is a valid task priority.

FUNCTION urt_priority_is_higher: (a: int, b: int): bool
	Compare two valid priorities

	If **`a`** and **`b`** are [valid](#urt_priority_is_valid) priorities, this function determines whether the priority of **`a`** is higher than **`b`**
	or not.

	INPUT a
		A valid priority.
	INPUT b
		A valid priority.
	OUTPUT
		Whether priority with value **`a`** is higher than priority with value **`b`** in the system.
