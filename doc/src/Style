other Style
# URT - Unified Real-Time Interface
version version 0.3.0
author Shahbaz Youssefi
keyword real-time
keyword middleware
keyword interface
shortcut index
shortcut globals
shortcut constants
next index

## Function Call Context
Initialization, finalization and resource allocation functions can only be called from **non**<>-real-time context. Functions that
access a resource (for example `[#urt_sem_wait](urt_lock)`) or request a real-time functionality (for example `[#urt_get_exec_time](urt_time)`)
can only be called from real-time context.  Throughout the documentation, functions that can only be called from real-time context are marked with
`RT` as well as a notice.  Other functions (for example `[#urt_log](urt_log)` or `[#urt_sleep](urt_time)`) are callable from both contexts.

## Shared Resources
Shared resources in URT are identified by at-most-`[#URT_NAME_LEN](constants)`-character names, comprising of capital letters (`'A'-'Z'`), digits (`'0'-'9'`)
and underscore (`'\_'`). At most `URT_NAME_LEN` characters are read from the name string. Therefore, a `URT_NAME_LEN`-character name doesn't need to be
NUL-terminated. If NUL or an invalid character is reached before the `URT_NAME_LEN` characters, the name is truncated to that length.

## Shared Resource Allocation
Each resource, such as memory or semaphore can either be allocated unshared or shared. If shared, the allocation function takes a
`name` parameter as the first argument. Assuming the name of the resource is `x` (such as `mem` for memory), then the following six
functions exist:

- `urt_x_new`: allocates `x`.
- `urt_x_delete`: deallocates `x` allocated by `urt_x_new`.
- `urt_shx_new`: allocates shared `x`. If the given name is already in use, even if it's an `x`, the function would fail.
- `urt_shx_delete`: deallocates `x` allocated by `urt_shx_new`.
- `urt_shx_attach`: attaches to `x` shared by given name. If no such `x` exist, the function would fail.
- `urt_shx_detach`: detaches from `x` attached to by `urt_shx_attach`.

Note that the shared objects are reference counted. As a result, `urt_shx_delete` and `urt_shx_detach` functions are in fact the same
and they exist for symmetry. Both of these functions either detach from or delete the shared object based on its usage count.

## Error Reporting
The functions of URT either create something, such as `[#urt_mem_new](urt_mem)`, or do something such as `[#urt_sem_post](urt_lock)`.
The functions that do something, if it is possible for them to fail for any reason, will have an `int` return value that can indicate
possible [errors](constants#Return Values).

The functions that create something, on the other hand, will return what was created. If these functions fail, they will return `NULL`.
To return the error code to the interested user, these functions will take an optional `int *` parameter as the last argument where,
if provided, the error code would be stored. If the function doesn't fail, this parameter will _not_ be touched.

## Blocking Locks
Locking operations, such as `[#urt_sem_wait](urt_lock)`, block the thread until the lock is available. However, for various reasons, there
may be need to cancel this action. This could be either due to an error, e.g. the thread responsible for posting the semaphore dies, or
simply on a clean application exit where all threads are requested to gracefully terminate themselves and therefore need to be unblocked
even if waiting for a lock.

These functions therefore take an optional `bool *` as their last argument which can be used (by another thread) to cancel the operation.
The locking function will in such a situation return after a maximum of a configurable time (`URT_CONFIG_LOCK_STOP_MAX_DELAY`) and have
the return value of `ECANCELED`.
