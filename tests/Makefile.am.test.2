ACLOCAL_AMFLAGS = -I m4

AM_TESTS_ENVIRONMENT = \
needs_ko="$(URT_TESTS_NEED_URT_KO)"; export needs_ko; \
top_srcdir="$(top_srcdir)"; export top_srcdir; \
top_builddir="$(top_builddir)"; export top_builddir;
if HAVE_VALGRIND
  AM_TESTS_ENVIRONMENT += \
  have_valgrind=y; export have_valgrind;
endif
if NEED_ROOT
  AM_TESTS_ENVIRONMENT += \
  needs_root=y; export needs_root;
endif

TESTS =

if HAVE_USER
check_PROGRAMS = test_master test_slave

test_master_SOURCES = main.c
test_master_CFLAGS = $(URT_CFLAGS_USER) -I"$(top_srcdir)/include" -I"$(top_srcdir)/sys/$(URT_SYS)/include"
test_master_LDADD = ../../src/liburt@URT_SUFFIX@.la $(URT_LDFLAGS_USER)

test_slave_SOURCES = other.c
test_slave_CFLAGS = $(URT_CFLAGS_USER) -I"$(top_srcdir)/include" -I"$(top_srcdir)/sys/$(URT_SYS)/include"
test_slave_LDADD = ../../src/liburt@URT_SUFFIX@.la $(URT_LDFLAGS_USER)

TESTS += run.sh
endif

if HAVE_KERNEL
EXTRA_DIST = Kbuild

KBUILD_EXTRA_CFLAGS = $(KBUILD_CFLAGS)
KBUILD_EXTRA_SYMBOLS = \
                       $(abs_top_builddir)/src/Module.symvers \
                       $(KBUILD_SYMBOLS)

TESTS += run_kernel.sh

V_KERN_INVOKE = $(V_KERN_INVOKE_@AM_V@)
V_KERN_INVOKE_ = $(V_KERN_INVOKE_@AM_DEFAULT_V@)
V_KERN_INVOKE_0 = @
V_KERN_INVOKE_1 =

# Note: check-local is actually check-hook and there is no check-local!
all-local:
	$(V_KERN_INVOKE)$(URT_KERNEL_INVOKE) modules
clean-local:
	$(V_KERN_INVOKE)$(URT_KERNEL_INVOKE) clean
	rm -f "$(srcdir)"/*.o "$(srcdir)"/.*.cmd
endif

check_SCRIPTS = $(TESTS)
