from ctypes import *

cdll.LoadLibrary("liburt@URT_SUFFIX@.so")
_urt = CDLL("liburt@URT_SUFFIX@.so")

# types

_urt_time = c_longlong

class _urt_task_attr(Structure):
    _fields_ = [("period", _urt_time),
                ("start_time", _urt_time),
                ("stack_size", c_size_t),
                ("priority", c_int),
                ("uses_fpu", c_bool),
                ("soft", c_bool)]   # TODO: RTAI hard real-time threads may not play nicely with Python
                                    # According to Python's documentation, when the callback is called
                                    # from a thread created outside of Python, a dummy thread is created
                                    # by python to run the callback on.  This thread allocation may cause
                                    # problems with RTAI because at the time the callback is called, the
                                    # thread is already made hard real-time.  Test this.  If this is true,
                                    # then remove the "soft" field from the structure.  Might as well
                                    # remove uses_fpu too since it affects only kernel space

_urt_task = c_void_p
_urt_sem = c_void_p
_urt_mutex = c_void_p
_urt_rwlock = c_void_p
_urt_cond = c_void_p
_sig_atomic_t = c_void_p

# constants

NAME_LEN = 6

# urt_setup

_urt.urt_init.restype = c_int
init = _urt.urt_init

exit = _urt.urt_exit

# TODO: urt_glue and urt_glue_no_interrupt that take init, body and exit functions
# just like with C.  Although mostly unnecessary, this helps bring some uniformity.
# Aside from that, urt_glue would set up interrupt handling as well.  This is to
# be investigated though.  For example, ctypes doesn't have a c_sig_atomic_t type
# to be sent to cancellable locks, so a workaround is required.  One option is
# to implement a urt_glue_for_python function in the C library that returns pointers
# to interrupted and done variables (void * in interrupted case) so they can pass
# it back, possibly with C _for_python wrappers around those locking functions as well.

## urt_setup tools

recover = _urt.urt_recover

print_names = _urt.urt_print_names

_urt.urt_force_clear_name.argtypes = [c_char_p]
force_clear_name = _urt.urt_force_clear_name

_urt.urt_dump_memory.argtypes = [c_char_p, c_size_t, c_size_t]
dump_memory = _urt.urt_dump_memory

# urt_utils

_urt.urt_get_free_name.argtypes = [c_char_p]
_urt.urt_get_free_name.restype = c_int
def get_free_name():
    new_name = create_string_buffer(NAME_LEN + 1)
    ret = _urt.urt_get_free_name(new_name)
    return new_name.value, ret

_urt.urt_is_rt_context.restype = c_bool
is_rt_context = _urt.urt_is_rt_context

_urt.urt_is_nonrt_context.restype = c_bool
is_nonrt_context = _urt.urt_is_nonrt_context

# urt_time

_urt.urt_get_time.restype = _urt_time
get_time = _urt.urt_get_time

_urt.urt_sleep.argtypes = [_urt_time]
sleep = _urt.urt_sleep

_urt.urt_get_exec_time.restype = _urt_time
get_exec_time = _urt.urt_get_exec_time

# urt_task

_urt.urt_task_new.argtypes = [CFUNCTYPE(None, _urt_task, c_void_p), c_void_p, POINTER(_urt_task_attr), POINTER(c_int)]
_urt.urt_task_new.restype = _urt_task
def task_new(func, data, attr):
    error = c_int(0)
    task = _urt.urt_task_new(func, data, byref(attr), byref(error))
    return task, error

_urt.urt_task_delete.argtypes = [_urt_task]
task_delete = _urt.urt_task_delete

_urt.urt_task_start.argtypes = [_urt_task]
_urt.urt_task_start.restype = c_int
task_start = _urt.urt_task_start

_urt.urt_task_wait_period.argtypes = [_urt_task]
task_wait_period = _urt.urt_task_wait_period

_urt.urt_task_next_period.argtypes = [_urt_task]
_urt.urt_task_next_period.restype = _urt_time
task_next_period = _urt.urt_task_next_period

_urt.urt_task_period_time_left.argtypes = [_urt_task]
_urt.urt_task_period_time_left.restype = _urt_time
task_period_time_left = _urt.urt_task_period_time_left

_urt.urt_priority_is_valid.argtypes = [c_int]
_urt.urt_priority_is_valid.restype = c_bool
priority_is_valid = _urt.urt_priority_is_valid

_urt.urt_priority_is_higher.argtypes = [c_int, c_int]
_urt.urt_priority_is_higher.restype = c_bool
priority_is_higher = _urt.urt_priority_is_higher

_urt.urt_priority.argtypes = [c_int]
_urt.urt_priority.restype = c_int
priority = _urt.urt_priority

# urt_mem

_urt.urt_mem_new.argtypes = [c_size_t, POINTER(c_int)]
_urt.urt_mem_new.restype = c_void_p
def mem_new(size):
    error = c_int(0)
    mem = _urt.urt_mem_new(size, byref(error))
    return mem, error

_urt.urt_mem_resize.argtypes = [c_void_p, c_size_t, c_size_t, POINTER(c_int)]
_urt.urt_mem_resize.restype = c_void_p
def mem_resize(old_mem, old_size, size):
    error = c_int(0)
    mem = _urt.urt_mem_resize(old_mem, old_size, size, byref(error))
    return mem, error

_urt.urt_shmem_new.argtypes = [c_char_p, c_size_t, POINTER(c_int)]
_urt.urt_shmem_new.restype = c_void_p
def shmem_new(name, size):
    error = c_int(0)
    mem = _urt.urt_shmem_new(name, size, byref(error))
    return mem, error

_urt.urt_shmem_attach.argtypes = [c_char_p, POINTER(c_int)]
_urt.urt_shmem_attach.restype = c_void_p
def shmem_attach(name):
    error = c_int(0)
    mem = _urt.urt_shmem_attach(name, byref(error))
    return mem, error

_urt.urt_shmem_detach.argtypes = [c_void_p]
shmem_detach = _urt.urt_shmem_detach

_urt.urt_shmem_delete.argtypes = [c_void_p]
shmem_delete = _urt.urt_shmem_delete

# urt_lock

# urt_lock semaphores

_urt.urt_sem_new.argtypes = [c_uint, POINTER(c_int)]
_urt.urt_sem_new.restype = _urt_sem
def sem_new(init_value):
    error = c_int(0)
    sem = _urt.urt_sem_new(init_value, byref(error))
    return sem, error

_urt.urt_sem_delete.argtypes = [_urt_sem]
sem_delete = _urt.urt_sem_delete

_urt.urt_shsem_new.argtypes = [c_char_p, c_uint, POINTER(c_int)]
_urt.urt_shsem_new.restype = _urt_sem
def shsem_new(name, init_value):
    error = c_int(0)
    sem = _urt.urt_shsem_new(name, init_value, byref(error))
    return sem, error

_urt.urt_shsem_attach.argtypes = [c_char_p, POINTER(c_int)]
_urt.urt_shsem_attach.restype = _urt_sem
def shsem_attach(name):
    error = c_int(0)
    sem = _urt.urt_shsem_attach(name, byref(error))
    return sem, error

_urt.urt_shsem_detach.argtypes = [_urt_sem]
shsem_detach = _urt.urt_shsem_detach

_urt.urt_shsem_delete.argtypes = [_urt_sem]
shsem_delete = _urt.urt_shsem_delete

_urt.urt_sem_wait.argtypes = [_urt_sem, _sig_atomic_t]
_urt.urt_sem_wait.restype = c_int
sem_wait = _urt.urt_sem_wait

_urt.urt_sem_waitf.argtypes = [_urt_sem, CFUNCTYPE(c_bool, c_void_p), c_void_p]
_urt.urt_sem_waitf.restype = c_int
sem_waitf = _urt.urt_sem_waitf

_urt.urt_sem_timed_wait.argtypes = [_urt_sem, _urt_time]
_urt.urt_sem_timed_wait.restype = c_int
sem_timed_wait = _urt.urt_sem_timed_wait

_urt.urt_sem_try_wait.argtypes = [_urt_sem]
_urt.urt_sem_try_wait.restype = c_int
sem_try_wait = _urt.urt_sem_try_wait

_urt.urt_sem_post.argtypes = [_urt_sem]
_urt.urt_sem_post.restype = c_int
sem_post = _urt.urt_sem_post

# urt_lock mutexes

_urt.urt_mutex_new.argtypes = [POINTER(c_int)]
_urt.urt_mutex_new.restype = _urt_mutex
def mutex_new():
    error = c_int(0)
    mutex = _urt.urt_mutex_new(byref(error))
    return mutex, error

_urt.urt_mutex_delete.argtypes = [_urt_mutex]
mutex_delete = _urt.urt_mutex_delete

_urt.urt_shmutex_new.argtypes = [c_char_p, POINTER(c_int)]
_urt.urt_shmutex_new.restype = _urt_mutex
def shmutex_new(name):
    error = c_int(0)
    mutex = _urt.urt_shmutex_new(name, byref(error))
    return mutex, error

_urt.urt_shmutex_attach.argtypes = [c_char_p, POINTER(c_int)]
_urt.urt_shmutex_attach.restype = _urt_mutex
def shmutex_attach(name):
    error = c_int(0)
    mutex = _urt.urt_shmutex_attach(name, byref(error))
    return mutex, error

_urt.urt_shmutex_detach.argtypes = [_urt_mutex]
shmutex_detach = _urt.urt_shmutex_detach

_urt.urt_shmutex_delete.argtypes = [_urt_mutex]
shmutex_delete = _urt.urt_shmutex_delete

_urt.urt_mutex_lock.argtypes = [_urt_mutex, _sig_atomic_t]
_urt.urt_mutex_lock.restype = c_int
mutex_lock = _urt.urt_mutex_lock

_urt.urt_mutex_lockf.argtypes = [_urt_mutex, CFUNCTYPE(c_bool, c_void_p), c_void_p]
_urt.urt_mutex_lockf.restype = c_int
mutex_lockf = _urt.urt_mutex_lockf

_urt.urt_mutex_timed_lock.argtypes = [_urt_mutex, _urt_time]
_urt.urt_mutex_timed_lock.restype = c_int
mutex_timed_lock = _urt.urt_mutex_timed_lock

_urt.urt_mutex_try_lock.argtypes = [_urt_mutex]
_urt.urt_mutex_try_lock.restype = c_int
mutex_try_lock = _urt.urt_mutex_try_lock

_urt.urt_mutex_unlock.argtypes = [_urt_mutex]
_urt.urt_mutex_unlock.restype = c_int
mutex_unlock = _urt.urt_mutex_unlock

# urt_lock reader-writer locks

_urt.urt_rwlock_new.argtypes = [POINTER(c_int)]
_urt.urt_rwlock_new.restype = _urt_rwlock
def rwlock_new():
    error = c_int(0)
    rwlock = _urt.urt_rwlock_new(byref(error))
    return rwlock, error

_urt.urt_rwlock_delete.argtypes = [_urt_rwlock]
rwlock_delete = _urt.urt_rwlock_delete

_urt.urt_shrwlock_new.argtypes = [c_char_p, POINTER(c_int)]
_urt.urt_shrwlock_new.restype = _urt_rwlock
def shrwlock_new(name):
    error = c_int(0)
    rwlock = _urt.urt_shrwlock_new(name, byref(error))
    return rwlock, error

_urt.urt_shrwlock_attach.argtypes = [c_char_p, POINTER(c_int)]
_urt.urt_shrwlock_attach.restype = _urt_rwlock
def shrwlock_attach(name):
    error = c_int(0)
    rwlock = _urt.urt_shrwlock_attach(name, byref(error))
    return rwlock, error

_urt.urt_shrwlock_detach.argtypes = [_urt_rwlock]
shrwlock_detach = _urt.urt_shrwlock_detach

_urt.urt_shrwlock_delete.argtypes = [_urt_rwlock]
shrwlock_delete = _urt.urt_shrwlock_delete

_urt.urt_rwlock_read_lock.argtypes = [_urt_rwlock, _sig_atomic_t]
_urt.urt_rwlock_read_lock.restype = c_int
rwlock_read_lock = _urt.urt_rwlock_read_lock

_urt.urt_rwlock_read_lockf.argtypes = [_urt_rwlock, CFUNCTYPE(c_bool, c_void_p), c_void_p]
_urt.urt_rwlock_read_lockf.restype = c_int
rwlock_read_lockf = _urt.urt_rwlock_read_lockf

_urt.urt_rwlock_timed_read_lock.argtypes = [_urt_rwlock, _urt_time]
_urt.urt_rwlock_timed_read_lock.restype = c_int
rwlock_timed_read_lock = _urt.urt_rwlock_timed_read_lock

_urt.urt_rwlock_try_read_lock.argtypes = [_urt_rwlock]
_urt.urt_rwlock_try_read_lock.restype = c_int
rwlock_try_read_lock = _urt.urt_rwlock_try_read_lock

_urt.urt_rwlock_read_unlock.argtypes = [_urt_rwlock]
_urt.urt_rwlock_read_unlock.restype = c_int
rwlock_read_unlock = _urt.urt_rwlock_read_unlock

_urt.urt_rwlock_write_lock.argtypes = [_urt_rwlock, _sig_atomic_t]
_urt.urt_rwlock_write_lock.restype = c_int
rwlock_write_lock = _urt.urt_rwlock_write_lock

_urt.urt_rwlock_write_lockf.argtypes = [_urt_rwlock, CFUNCTYPE(c_bool, c_void_p), c_void_p]
_urt.urt_rwlock_write_lockf.restype = c_int
rwlock_write_lockf = _urt.urt_rwlock_write_lockf

_urt.urt_rwlock_timed_write_lock.argtypes = [_urt_rwlock, _urt_time]
_urt.urt_rwlock_timed_write_lock.restype = c_int
rwlock_timed_write_lock = _urt.urt_rwlock_timed_write_lock

_urt.urt_rwlock_try_write_lock.argtypes = [_urt_rwlock]
_urt.urt_rwlock_try_write_lock.restype = c_int
rwlock_try_write_lock = _urt.urt_rwlock_try_write_lock

_urt.urt_rwlock_write_unlock.argtypes = [_urt_rwlock]
_urt.urt_rwlock_write_unlock.restype = c_int
rwlock_write_unlock = _urt.urt_rwlock_write_unlock

# urt_lock condition variables

_urt.urt_cond_new.argtypes = [POINTER(c_int)]
_urt.urt_cond_new.restype = _urt_cond
def cond_new():
    error = c_int(0)
    cond = _urt.urt_cond_new(byref(error))
    return cond, error

_urt.urt_cond_delete.argtypes = [_urt_cond]
cond_delete = _urt.urt_cond_delete

_urt.urt_shcond_new.argtypes = [c_char_p, POINTER(c_int)]
_urt.urt_shcond_new.restype = _urt_cond
def shcond_new(name):
    error = c_int(0)
    cond = _urt.urt_shcond_new(name, byref(error))
    return cond, error

_urt.urt_shcond_attach.argtypes = [c_char_p, POINTER(c_int)]
_urt.urt_shcond_attach.restype = _urt_cond
def shcond_attach(name):
    error = c_int(0)
    cond = _urt.urt_shcond_attach(name, byref(error))
    return cond, error

_urt.urt_shcond_detach.argtypes = [_urt_cond]
shcond_detach = _urt.urt_shcond_detach

_urt.urt_shcond_delete.argtypes = [_urt_cond]
shcond_delete = _urt.urt_shcond_delete

_urt.urt_cond_wait.argtypes = [_urt_cond, _sig_atomic_t]
_urt.urt_cond_wait.restype = c_int
cond_wait = _urt.urt_cond_wait

_urt.urt_cond_waitf.argtypes = [_urt_cond, CFUNCTYPE(c_bool, c_void_p), c_void_p]
_urt.urt_cond_waitf.restype = c_int
cond_waitf = _urt.urt_cond_waitf

_urt.urt_cond_timed_wait.argtypes = [_urt_cond, _urt_time]
_urt.urt_cond_timed_wait.restype = c_int
cond_timed_wait = _urt.urt_cond_timed_wait

_urt.urt_cond_signal.argtypes = [_urt_cond]
_urt.urt_cond_signal.restype = c_int
cond_signal = _urt.urt_cond_signal

_urt.urt_cond_broadcast.argtypes = [_urt_cond]
_urt.urt_cond_broadcast.restype = c_int
cond_broadcast = _urt.urt_cond_broadcast

# urt_log (Not currently supported)
